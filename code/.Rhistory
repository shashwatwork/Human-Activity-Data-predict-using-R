source('/home/shashwat/Desktop/VIT PROJECTS/UCI HAR Dataset/human-activity-recognition-with-smartphones/code/mcErrorRate.R')
##download.file("https://spark-public.s3.amazonaws.com/dataanalysis/samsungData.rda")
load("/home/shashwat/Desktop/VIT PROJECTS/UCI HAR Dataset/human-activity-recognition-with-smartphones/data/samsungData.rda")
names(samsungData)
table(is.na(samsungData)) ## no NAs
table(samsungData$subject)
### Data Wrangling
#### Make current names syntactically valid and unique
names(samsungData) <- make.names(names(samsungData),unique=TRUE)
names(samsungData)
### Split Data
#### use 30% in test set
test1 <- c(27,28,29,30)
train1 <-c(1,3,5,6)
rest <- unique(samsungData$subject)
rest <- setdiff(setdiff(rest,test1),train1)
set.seed(35252)
test1 <- c(test1, sample(rest,3, replace=FALSE))
train1 <- setdiff(c(train1,rest),test1)
trainSet <- samsungData[samsungData$subject %in% train1,]
testSet <- samsungData[samsungData$subject %in% test1,]
table(trainSet$subject)
table(testSet$subject)
### Pick Features
#### Check correlations
train.pearson <- cor(trainSet[,-c(562,563)])
train.pearson
train.spearman <- cor(trainSet[,-c(562,563)], method="spearman")
train.spearman
image(1:561,1:561,abs(train.pearson))
spear.im <- abs(t(train.spearman))[,nrow(train.spearman):1]
image(1:562,1:562,spear.im, xlab="Column #", ylab="Row #", cex=0.7)
#image(1:561,1:561,train.spearman, cex=0.7)
#heatmap(abs(train.spearman),Rowv=NA,Colv=NA)
source('/home/shashwat/Desktop/VIT PROJECTS/UCI HAR Dataset/human-activity-recognition-with-smartphones/code/cutoff.corr.R')
#### filter highly correlated values using spearman
spearmancut <- cutoff.corr(train.spearman,0.95)
cols.omit <- c(spearmancut)*-1
trainSet.2 <- trainSet[,cols.omit]
### decrease spearman Cuttfoff
spearmancut2 <- cutoff.corr(train.spearman,0.90)
cols.omit <- c(spearmancut2)*-1
trainSet.2_2 <- trainSet[,cols.omit]
#### filter highly correlated values using pearson (linear)
pearsoncut <- cutoff.corr(train.pearson,0.95)
cols.omit <- c(pearsoncut)*-1
trainSet.3 <- trainSet[,cols.omit]
par(mfrow=c(3,1))
hist(trainSet[trainSet$activity=="laying",]$tBodyGyro.energy...X)
hist(trainSet[trainSet$activity=="walkup",]$tBodyGyro.energy...X)
hist(trainSet[trainSet$activity=="walk",]$tBodyGyro.energy...X)
#### Find gravity vector
##Plotiing Histogram with gravity vector using mfrow
par(mfrow=c(3,1))
hist(trainSet[trainSet$activity=="laying",]$tGravityAcc.max...X)
hist(trainSet[trainSet$activity=="laying",]$tGravityAcc.max...Y)
hist(trainSet[trainSet$activity=="laying",]$tGravityAcc.max...Z)
hist(trainSet[trainSet$activity=="laying",]$tGravityAcc.mean...X)
hist(trainSet[trainSet$activity=="laying",]$tGravityAcc.mean...Y)
hist(trainSet[trainSet$activity=="laying",]$tGravityAcc.mean...Z)
hist(trainSet[trainSet$activity=="standing",]$tGravityAcc.mean...X)
hist(trainSet[trainSet$activity=="standing",]$tGravityAcc.mean...Y)
hist(trainSet[trainSet$activity=="standing",]$tGravityAcc.mean...Z)
hist(trainSet[trainSet$activity=="standing",]$tGravityAcc.max...X)
hist(trainSet[trainSet$activity=="standing",]$tGravityAcc.max...Y)
hist(trainSet[trainSet$activity=="standing",]$tGravityAcc.max...Z)
hist(trainSet[trainSet$activity=="sitting",]$tGravityAcc.max...X)
hist(trainSet[trainSet$activity=="sitting",]$tGravityAcc.max...Y)
hist(trainSet[trainSet$activity=="sitting",]$tGravityAcc.max...Z)
#Plotting graphs
par(mfrow=c(1,1))
plot(1:nrow(trainSet),trainSet[order(trainSet$activity),"tGravityAcc.max...X"],
col=as.factor(unique(trainSet[order(trainSet$activity),"activity"])), pch=19, cex=0.5)
legend("bottomright", legend=unique(trainSet$activity), col=as.factor(unique(trainSet$activity)),
pch=19, cex=0.8)
#Plotting graphs
par(mfrow=c(1,1))
plot(1:nrow(trainSet),trainSet$tGravityAcc.mean...Y,
col=as.factor(unique(trainSet$activity)), pch=19, cex=0.5)
legend("bottomright", legend=unique(trainSet$activity), col=as.factor(unique(trainSet$activity)),
pch=19, cex=0.8)
### Pick Function
### Try a tree
#### create Tree, first using all variables
library(tree)
train.tree <- tree(factor(activity)~.,data=trainSet)
par(mfrow=c(1,1))
plot(train.tree)
text(train.tree, cex=0.5)
summary(train.tree)
